'use strict';
var toDateString = require('../utils/dateformat').toDateString;
function exchanges() {
    return this.polygonHttpRequest('/meta/exchanges');
}
function symbolTypeMap() {
    return this.polygonHttpRequest('/meta/symbol-types');
}
// options: limit, timestamp, timestamp_limit, reverse
function historicTradesV2(symbol, date, options) {
    if (options === void 0) { options = {}; }
    var path = "/ticks/stocks/trades/" + symbol + "/" + toDateString(date);
    return this.polygonHttpRequest(path, options, null, null, 'v2');
}
// options: limit, timestamp, timestamp_limit, reverse
function historicQuotesV2(symbol, date, options) {
    if (options === void 0) { options = {}; }
    var path = "ticks/stocks/nbbo/" + symbol + "/" + toDateString(date);
    return this.polygonHttpRequest(path, options, null, null, 'v2');
}
// size: 'day', 'minute'
// from, to: YYYY-MM-DD or unix millisecond timestamps
// options: unadjusted
function historicAggregatesV2(symbol, multiplier, size, from, to, options) {
    if (options === void 0) { options = {}; }
    var path = "/aggs/ticker/" + symbol + "/range/" + multiplier + "/" + size + "/" + from + "/" + to;
    return this.polygonHttpRequest(path, options, null, null, 'v2');
}
function lastTrade(symbol) {
    var path = "/last/stocks/" + symbol;
    return this.polygonHttpRequest(path);
}
function lastQuote(symbol) {
    var path = "/last_quote/stocks/" + symbol;
    return this.polygonHttpRequest(path);
}
function conditionMap(ticktype) {
    if (ticktype === void 0) { ticktype = 'trades'; }
    var path = "/meta/conditions/" + ticktype;
    return this.polygonHttpRequest(path);
}
var symbolMeta = function (resource) { return function (symbol) {
    var path = "/meta/symbols/" + symbol + (resource ? "/" + resource : '');
    return this.polygonHttpRequest(path);
}; };
var symbolReference = function (resource) { return function (symbol, options) {
    if (options === void 0) { options = {}; }
    var path = '/reference' + (resource ? "/" + resource : '') + ("/" + symbol);
    return this.polygonHttpRequest(path, options, null, null, 'v2').then(function (response) {
        return response.results;
    });
}; };
var getSymbol = symbolMeta();
var company = symbolMeta('company');
var dividends = symbolReference('dividends');
var splits = symbolReference('splits');
var financials = symbolReference('financials');
var news = symbolMeta('news');
module.exports = {
    exchanges: exchanges,
    symbolTypeMap: symbolTypeMap,
    historicTradesV2: historicTradesV2,
    historicQuotesV2: historicQuotesV2,
    historicAggregatesV2: historicAggregatesV2,
    lastTrade: lastTrade,
    lastQuote: lastQuote,
    conditionMap: conditionMap,
    company: company,
    dividends: dividends,
    financials: financials,
    splits: splits,
    news: news,
    getSymbol: getSymbol,
};
